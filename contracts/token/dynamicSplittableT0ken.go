// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// DynamicSplittableT0kenABI is the input ABI used to generate the binding from.
const DynamicSplittableT0kenABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSplitIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSuperseded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cancellations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"original\",\"type\":\"address\"},{\"name\":\"replacement\",\"type\":\"address\"}],\"name\":\"cancelAndReissue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferOverride\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"holderAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"name\":\"count\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint128\"},{\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"updateSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"splits\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint128\"},{\"name\":\"denominator\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cashedOutTokenQuantity\",\"type\":\"uint256\"}],\"name\":\"splitTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeShareholder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdersSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIssuance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSuperseded\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newComplianceAddress\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"original\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"replacement\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressSuperseded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousIssuer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"IssuerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IssuanceFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"ShareholderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"ShareholderRemoved\",\"type\":\"event\"}]"

// DynamicSplittableT0kenBin is the compiled bytecode used for deploying new contracts.
const DynamicSplittableT0kenBin = `6080604052600180546001600160a01b031916905560006010553480156200002657600080fd5b5060405162002c2238038062002c22833981810160405260408110156200004c57600080fd5b8101908080516401000000008111156200006557600080fd5b820160208101848111156200007957600080fd5b81516401000000008111828201871017156200009457600080fd5b50509291906020018051640100000000811115620000b157600080fd5b82016020810184811115620000c557600080fd5b8151640100000000811182820187101715620000e057600080fd5b5050600080546001600160a01b031916331781556001805460ff60a01b1916905585519194508593508492509062000120906002906020860190620001d4565b50815162000136906003906020850190620001d4565b506004805460ff90921660ff199092169190911790555050604080518082019091526001808252602080830191825260008052600f905290517ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec375805492516001600160801b03908116700100000000000000000000000000000000029281166001600160801b03199094169390931790921617905550620002799050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021757805160ff191683800117855562000247565b8280016001018555821562000247579182015b82811115620002475782518255916020019190600101906200022a565b506200025592915062000259565b5090565b6200027691905b8082111562000255576000815560010162000260565b90565b61299980620002896000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806379f64720116101605780639babdad6116100d8578063c422293b1161008c578063dd62ed3e11610071578063dd62ed3e146106ea578063e37ccac714610718578063f89817891461073e57610277565b8063c422293b146106bc578063d4d7b19a146106c457610277565b8063a5820daa116100bd578063a5820daa1461064d578063a9059cbb1461066a578063b0b89d921461069657610277565b80639babdad61461061f578063a4e2d6341461064557610277565b8063872a72ea1161012f5780638da5cb5b116101145780638da5cb5b146105f257806395d89b41146105fa57806398d34b9b1461060257610277565b8063872a72ea14610581578063884c3006146105af57610277565b806379f64720146104f857806380318be8146105265780638082a9291461055c5780638188f71c1461057957610277565b8063313ce567116101f35780634fb2e45d116101c257806355cc4e57116101a757806355cc4e57146104a45780636290865d146104ca57806370a08231146104d257610277565b80634fb2e45d14610476578063538ba4f91461049c57610277565b8063313ce5671461042257806334a848271461044057806341c0e1b5146104665780634662299a1461046e57610277565b80631d1438481161024a57806323b872dd1161022f57806323b872dd146103a057806327e235e3146103d65780632da7293e146103fc57610277565b80631d1438481461035b578063211e28b61461037f57610277565b806306fdde031461027c578063095ea7b3146102f957806317344a901461033957806318160ddd14610353575b600080fd5b610284610764565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102be5781810151838201526020016102a6565b50505050905090810190601f1680156102eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103256004803603604081101561030f57600080fd5b506001600160a01b0381351690602001356107ef565b604080519115158252519081900360200190f35b610341610970565b60408051918252519081900360200190f35b610341610976565b61036361097c565b604080516001600160a01b039092168252519081900360200190f35b61039e6004803603602081101561039557600080fd5b5035151561098b565b005b610325600480360360608110156103b657600080fd5b506001600160a01b03813581169160208101359091169060400135610a73565b610341600480360360208110156103ec57600080fd5b50356001600160a01b0316610a9c565b6103256004803603602081101561041257600080fd5b50356001600160a01b0316610aae565b61042a610ad1565b6040805160ff9092168252519081900360200190f35b6103636004803603602081101561045657600080fd5b50356001600160a01b0316610ada565b61039e610af5565b610325610b7d565b61039e6004803603602081101561048c57600080fd5b50356001600160a01b0316610b8d565b610363610cff565b61039e600480360360208110156104ba57600080fd5b50356001600160a01b0316610d0e565b610363610e95565b610341600480360360208110156104e857600080fd5b50356001600160a01b0316610ea4565b61039e6004803603604081101561050e57600080fd5b506001600160a01b0381358116916020013516610f29565b6103256004803603606081101561053c57600080fd5b506001600160a01b03813581169160208101359091169060400135610f64565b6103636004803603602081101561057257600080fd5b5035610f7b565b610341610f94565b61039e6004803603604081101561059757600080fd5b506001600160801b0381358116916020013516610f9a565b6105cc600480360360208110156105c557600080fd5b5035611139565b604080516001600160801b03938416815291909216602082015281519081900390910190f35b61036361115f565b61028461116e565b6103256004803603602081101561061857600080fd5b50356111c9565b61039e6004803603602081101561063557600080fd5b50356001600160a01b03166112de565b6103256113e5565b6103256004803603602081101561066357600080fd5b50356113f5565b6103256004803603604081101561068057600080fd5b506001600160a01b03813516906020013561141f565b610341600480360360208110156106ac57600080fd5b50356001600160a01b031661143c565b61032561144e565b610325600480360360208110156106da57600080fd5b50356001600160a01b031661159b565b6103416004803603604081101561070057600080fd5b506001600160a01b03813581169160200135166115ae565b6103636004803603602081101561072e57600080fd5b50356001600160a01b0316611637565b61039e6004803603602081101561075457600080fd5b50356001600160a01b0316611663565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107e75780601f106107bc576101008083540402835291602001916107e7565b820191906000526020600020905b8154815290600101906020018083116107ca57829003601f168201915b505050505081565b600154600090600160a01b900460ff161561083b5760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b336000818152600a60205260409020546001600160a01b0316156108a6576040805162461bcd60e51b815260206004820152601a60248201527f4164647265737320686173206265656e2063616e63656c6c6564000000000000604482015290519081900360640190fd5b6108b760053363ffffffff61174816565b610908576040805162461bcd60e51b815260206004820152601560248201527f4d7573742062652061207368617265686f6c6465720000000000000000000000604482015290519081900360640190fd5b336000818152600d602090815260408083206001600160a01b03891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60105481565b600c5490565b6009546001600160a01b031681565b6000546001600160a01b03163314806109b457506001546000546001600160a01b039081169116145b610a05576040805162461bcd60e51b815260206004820152601960248201527f4f776e6572206163636f756e7420697320726571756972656400000000000000604482015290519081900360640190fd5b60015460ff600160a01b9091041615158115151415610a555760405162461bcd60e51b81526004018080602001828103825260288152602001806129106028913960400191505060405180910390fd5b60018054911515600160a01b0260ff60a01b19909216919091179055565b6000610a7f848461177d565b610a8984846117ba565b610a9484848461181a565b949350505050565b600b6020526000908152604090205481565b6001600160a01b038181166000908152600a60205260409020541615155b919050565b60045460ff1681565b600a602052600090815260409020546001600160a01b031681565b6000546001600160a01b0316331480610b1e57506001546000546001600160a01b039081169116145b610b6f576040805162461bcd60e51b815260206004820152601960248201527f4f776e6572206163636f756e7420697320726571756972656400000000000000604482015290519081900360640190fd5b6000546001600160a01b0316ff5b600954600160a01b900460ff1681565b6000546001600160a01b0316331480610bb657506001546000546001600160a01b039081169116145b610c07576040805162461bcd60e51b815260206004820152601960248201527f4f776e6572206163636f756e7420697320726571756972656400000000000000604482015290519081900360640190fd5b6000546001600160a01b0382811691161415610c545760405162461bcd60e51b81526004018080602001828103825260258152602001806128eb6025913960400191505060405180910390fd5b6001600160a01b038116610caf576040805162461bcd60e51b815260206004820181905260248201527f4e6577204f776e65722063616e6e6f74206265207a65726f2061646472657373604482015290519081900360640190fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c99190a35050565b6001546001600160a01b031681565b600154600160a01b900460ff1615610d575760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6000546001600160a01b0316331480610d8057506001546000546001600160a01b039081169116145b610dd1576040805162461bcd60e51b815260206004820152601960248201527f4f776e6572206163636f756e7420697320726571756972656400000000000000604482015290519081900360640190fd5b610de260058263ffffffff61174816565b15610e1e5760405162461bcd60e51b81526004018080602001828103825260218152602001806128a06021913960400191505060405180910390fd5b6009546001600160a01b03166000818152600b6020526040902054610e4591908390611a38565b600980546001600160a01b0319166001600160a01b0383811691821792839055604051919216907ff7189b85d7899f5a32d733e6584c4f1dcdff0274f09d969d186c1797673ede1190600090a350565b6008546001600160a01b031681565b6001600160a01b0381166000908152600b6020908152604080832054600e9092528220546001015b6010548111610f22576000818152600f6020526040902054610f18906001600160801b03600160801b8204811691610f0c9186911663ffffffff611bdb16565b9063ffffffff611c0216565b9150600101610ecc565b5092915050565b6001600160a01b038083166000818152600e602052604080822080549486168352908220939093559081529055610f608282611c21565b5050565b6000610f7084846117ba565b610a94848484611f2d565b6000610f8e60058363ffffffff61207016565b92915050565b60055481565b6009546001600160a01b03163314610fef576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481a5cdcdd595c88185b1b1bddd959606a1b604482015290519081900360640190fd5b600154600160a01b900460ff1661104d576040805162461bcd60e51b815260206004820152600e60248201527f4d757374206265206c6f636b6564000000000000000000000000000000000000604482015290519081900360640190fd5b6000826001600160801b031611801561106f57506000816001600160801b0316115b6110c0576040805162461bcd60e51b815260206004820152601860248201527f4e756d62657273206d75737420626520706f7369746976650000000000000000604482015290519081900360640190fd5b60108054600101908190556040805180820182526001600160801b03948516815292841660208085019182526000938452600f905291209151825491517fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216908416178316600160801b9190931602919091179055565b600f602052600090815260409020546001600160801b0380821691600160801b90041682565b6000546001600160a01b031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107e75780601f106107bc576101008083540402835291602001916107e7565b6009546000906001600160a01b03163314611221576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481a5cdcdd595c88185b1b1bddd959606a1b604482015290519081900360640190fd5b600154600160a01b900460ff1661127f576040805162461bcd60e51b815260206004820152600e60248201527f4d757374206265206c6f636b6564000000000000000000000000000000000000604482015290519081900360640190fd5b6010546000908152600f6020526040902054600c546001600160801b0380831692600160801b900416906112d1908290610f0c9085906112c5908963ffffffff6120f616565b9063ffffffff611bdb16565b600c555060019392505050565b6009546001600160a01b03163314611333576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481a5cdcdd595c88185b1b1bddd959606a1b604482015290519081900360640190fd5b61133c81610ea4565b158015611355575061135560058263ffffffff61215316565b6113a6576040805162461bcd60e51b815260206004820152601760248201527f5368617265686f6c646572206e6f742072656d6f766564000000000000000000604482015290519081900360640190fd5b604080516001600160a01b038316815290517f7ba114ff3d9844510a088eea94cd35562e7c97a2d36a418b37b2e61e5c77affe9181900360200190a150565b600154600160a01b900460ff1681565b6010546009546001600160a01b03166000908152600e6020526040812091909155610f8e8261223e565b600061142b33846117ba565b611435838361244c565b9392505050565b600e6020526000908152604090205481565b600154600090600160a01b900460ff161561149a5760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6009546001600160a01b031633146114ef576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481a5cdcdd595c88185b1b1bddd959606a1b604482015290519081900360640190fd5b600954600160a01b900460ff161561154e576040805162461bcd60e51b815260206004820152601960248201527f49737375616e636520616c72656164792066696e697368656400000000000000604482015290519081900360640190fd5b6009805460ff60a01b1916600160a01b1790556040517f29fe76cc5ca143e91eadf7242fda487fcef09318c1237900f958abe1e2c5beff90600090a150600954600160a01b900460ff1690565b6000610f8e60058363ffffffff61174816565b6001600160a01b038083166000818152600d60209081526040808320948616835293815283822054928252600e9052918220546001015b601054811161162f576000818152600f6020526040902054611625906001600160801b03600160801b8204811691610f0c9186911663ffffffff611bdb16565b91506001016115e5565b509392505050565b6001600160a01b038082166000908152600a602052604081205490911680610f8e576000915050610acc565b600154600160a01b900460ff16156116ac5760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6000546001600160a01b03163314806116d557506001546000546001600160a01b039081169116145b611726576040805162461bcd60e51b815260206004820152601960248201527f4f776e6572206163636f756e7420697320726571756972656400000000000000604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260018301602052604081205460001901818112801590610a945750925490921292915050565b600061178983836115ae565b6001600160a01b039384166000908152600d6020908152604080832095909616825293909352929091209190915550565b60006117c583610ea4565b905060006117d283610ea4565b6010546001600160a01b039586166000818152600e602090815260408083208590559790981680825287822093909355908152600b9096528486209390935591845250912055565b600154600090600160a01b900460ff16156118665760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6001600160a01b038084166000908152600a6020526040902054849116156118d5576040805162461bcd60e51b815260206004820152601a60248201527f4164647265737320686173206265656e2063616e63656c6c6564000000000000604482015290519081900360640190fd5b6001600160a01b0385166000908152600b60205260409020548590849081111561193b576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b604482015290519081900360640190fd5b6001600160a01b0387166000908152600d602090815260408083203384529091529020548511156119b3576040805162461bcd60e51b815260206004820152601a60248201527f5472616e73666572206578636565647320616c6c6f77616e6365000000000000604482015290519081900360640190fd5b60006119c28888886000612652565b90508015611a2d576001600160a01b0388166000908152600d602090815260408083203384529091529020546119fe908763ffffffff6120f616565b6001600160a01b0389166000908152600d60209081526040808320338452909152902055611a2d888888611a38565b979650505050505050565b6001600160a01b0383166000908152600b6020526040902054611a61908263ffffffff6120f616565b6001600160a01b038085166000908152600b60205260408082209390935590841681522054611a96908263ffffffff6127a016565b6001600160a01b038084166000818152600b602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a36001600160a01b0382166000908152600b602052604090205415801590611b205750611b2060058363ffffffff6127fa16565b15611b6257604080516001600160a01b038416815290517f3082c1c4977de80c4f67ee77b56b282610ec93a7ecbcc31b551e0ac2f7bd03959181900360200190a15b6001600160a01b0383166000908152600b6020526040902054158015611b945750611b9460058463ffffffff61215316565b15611bd657604080516001600160a01b038516815290517f7ba114ff3d9844510a088eea94cd35562e7c97a2d36a418b37b2e61e5c77affe9181900360200190a15b505050565b600082611bea57506000610f8e565b82820282848281611bf757fe5b041461143557600080fd5b6000808211611c1057600080fd5b818381611c1957fe5b049392505050565b600154600160a01b900460ff1615611c6a5760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6009546001600160a01b03163314611cbf576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481a5cdcdd595c88185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038082166000908152600a602052604090205482911615611d2e576040805162461bcd60e51b815260206004820152601a60248201527f4164647265737320686173206265656e2063616e63656c6c6564000000000000604482015290519081900360640190fd5b611d3f60058463ffffffff61174816565b8015611d595750611d5760058363ffffffff61174816565b155b611d945760405162461bcd60e51b815260040180806020018281038252602a8152602001806128c1602a913960400191505060405180910390fd5b6008546001600160a01b031615611e95576008546001600160a01b038481166000818152600b6020908152604080832054815163fd8258bd60e01b815233600482015260248101959095528886166044860152606485015251939094169363fd8258bd93608480850194929391928390030190829087803b158015611e1857600080fd5b505af1158015611e2c573d6000803e3d6000fd5b505050506040513d6020811015611e4257600080fd5b5051611e95576040805162461bcd60e51b815260206004820152601760248201527f4661696c656420636f6d706c69616e636520636865636b000000000000000000604482015290519081900360640190fd5b611ea660058463ffffffff61215316565b50611eb860058363ffffffff6127fa16565b506001600160a01b038381166000818152600a6020908152604080832080546001600160a01b0319169588169586179055600b90915280822080548584528284205583835282905551339392917fb64971100522354f3d25283cb14e2eefcb0dd26a757482ccfe42479d0a68685791a4505050565b600154600090600160a01b900460ff1615611f795760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6001600160a01b038084166000908152600a602052604090205484911615611fe8576040805162461bcd60e51b815260206004820152601a60248201527f4164647265737320686173206265656e2063616e63656c6c6564000000000000604482015290519081900360640190fd5b6001600160a01b0385166000908152600b60205260409020548590849081111561204e576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b604482015290519081900360640190fd5b600061205d8888886001612652565b90508015611a2d57611a2d888888611a38565b60008082121580156120825750825482125b6120d3576040805162461bcd60e51b815260206004820152601860248201527f496e646578206f757473696465206f6620626f756e64732e0000000000000000604482015290519081900360640190fd5b50600101600090815260029190910160205260409020546001600160a01b031690565b60008282111561214d576040805162461bcd60e51b815260206004820152601460248201527f526573756c747320696e20756e646572666c6f77000000000000000000000000604482015290519081900360640190fd5b50900390565b6001600160a01b0381166000908152600180840160205260408220549081128061217d5750835481135b1561218c576000915050610f8e565b83548112156121f357835460009081526002850160208181526040808420546001600160a01b03168085526001890183528185208690558585529290915280832080546001600160a01b031990811690931790558654835290912080549091169055612212565b6000818152600285016020526040902080546001600160a01b03191690555b50506001600160a01b031660009081526001828101602052604082209190915581546000190190915590565b600154600090600160a01b900460ff161561228a5760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6009546001600160a01b031633146122df576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481a5cdcdd595c88185b1b1bddd959606a1b604482015290519081900360640190fd5b600954600160a01b900460ff161561233e576040805162461bcd60e51b815260206004820152601960248201527f49737375616e636520616c72656164792066696e697368656400000000000000604482015290519081900360640190fd5b81156123bc57600c54612357908363ffffffff6127a016565b600c556009546001600160a01b03166000908152600b6020526040902054612385908363ffffffff6127a016565b600980546001600160a01b039081166000908152600b6020526040902092909255546123ba916005911663ffffffff6127fa16565b505b6009546040805184815290516001600160a01b03909216917f9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb9181900360200190a26009546040805184815290516001600160a01b03909216916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a3506001919050565b600154600090600160a01b900460ff16156124985760405162461bcd60e51b815260040180806020018281038252602d815260200180612938602d913960400191505060405180910390fd5b6001600160a01b038084166000908152600a602052604090205484911615612507576040805162461bcd60e51b815260206004820152601a60248201527f4164647265737320686173206265656e2063616e63656c6c6564000000000000604482015290519081900360640190fd5b336000818152600b60205260409020548490811115612562576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b604482015290519081900360640190fd5b6009546000906001600160a01b031633141561262757506008546001600160a01b03161580612622576008546009546040805163fd8258bd60e01b81526001600160a01b039283166004820181905260248201528a83166044820152606481018a90529051919092169163fd8258bd9160848083019260209291908290030181600087803b1580156125f357600080fd5b505af1158015612607573d6000803e3d6000fd5b505050506040513d602081101561261d57600080fd5b505190505b612637565b6126343388886000612652565b90505b801561264857612648338888611a38565b9695505050505050565b6008546000906001600160a01b031661266d57508015610a94565b811561272357600854604080517f5acba2010000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03888116602483015287811660448301526064820187905291519190921691635acba2019160848083019260209291908290030181600087803b1580156126f057600080fd5b505af1158015612704573d6000803e3d6000fd5b505050506040513d602081101561271a57600080fd5b50519050610a94565b600854604080517f6d62a4fe0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03888116602483015287811660448301526064820187905291519190921691636d62a4fe9160848083019260209291908290030181600087803b1580156126f057600080fd5b600082820183811015611435576040805162461bcd60e51b815260206004820152601360248201527f526573756c747320696e206f766572666c6f7700000000000000000000000000604482015290519081900360640190fd5b60006001600160a01b03821661281257506000610f8e565b6001600160a01b0382166000908152600184016020526040812054600019019081128015906128415750835481125b15612850576000915050610f8e565b5050815460019081018084556001600160a01b0383166000818152838601602090815260408083208590559382526002870190529190912080546001600160a01b03191690911790559291505056fe4e6577206973737565722063616e27742062652061207368617265686f6c6465724f726967696e616c20646f65736e2774206578697374206f72207265706c6163656d656e7420646f65734e6577204f776e65722063616e6e6f74206265207468652063757272656e74206f776e6572436f6e747261637420616c726561647920696e20726571756573746564206c6f636b207374617465436f6e74726163742069732063757272656e746c79206c6f636b656420666f72206d6f64696669636174696f6ea265627a7a7230582076acb65f452eeb73357ea35194e0102adf5a4f418480b67fe76b1825b2986a8a64736f6c634300050a0032`

// DeployDynamicSplittableT0ken deploys a new Ethereum contract, binding an instance of DynamicSplittableT0ken to it.
func DeployDynamicSplittableT0ken(auth *bind.TransactOpts, backend bind.ContractBackend, tokenName string, tokenSymbol string) (common.Address, *types.Transaction, *DynamicSplittableT0ken, error) {
	parsed, err := abi.JSON(strings.NewReader(DynamicSplittableT0kenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DynamicSplittableT0kenBin), backend, tokenName, tokenSymbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DynamicSplittableT0ken{DynamicSplittableT0kenCaller: DynamicSplittableT0kenCaller{contract: contract}, DynamicSplittableT0kenTransactor: DynamicSplittableT0kenTransactor{contract: contract}, DynamicSplittableT0kenFilterer: DynamicSplittableT0kenFilterer{contract: contract}}, nil
}

// DynamicSplittableT0ken is an auto generated Go binding around an Ethereum contract.
type DynamicSplittableT0ken struct {
	DynamicSplittableT0kenCaller     // Read-only binding to the contract
	DynamicSplittableT0kenTransactor // Write-only binding to the contract
	DynamicSplittableT0kenFilterer   // Log filterer for contract events
}

// DynamicSplittableT0kenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DynamicSplittableT0kenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DynamicSplittableT0kenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DynamicSplittableT0kenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DynamicSplittableT0kenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DynamicSplittableT0kenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DynamicSplittableT0kenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DynamicSplittableT0kenSession struct {
	Contract     *DynamicSplittableT0ken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DynamicSplittableT0kenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DynamicSplittableT0kenCallerSession struct {
	Contract *DynamicSplittableT0kenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// DynamicSplittableT0kenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DynamicSplittableT0kenTransactorSession struct {
	Contract     *DynamicSplittableT0kenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// DynamicSplittableT0kenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DynamicSplittableT0kenRaw struct {
	Contract *DynamicSplittableT0ken // Generic contract binding to access the raw methods on
}

// DynamicSplittableT0kenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DynamicSplittableT0kenCallerRaw struct {
	Contract *DynamicSplittableT0kenCaller // Generic read-only contract binding to access the raw methods on
}

// DynamicSplittableT0kenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DynamicSplittableT0kenTransactorRaw struct {
	Contract *DynamicSplittableT0kenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDynamicSplittableT0ken creates a new instance of DynamicSplittableT0ken, bound to a specific deployed contract.
func NewDynamicSplittableT0ken(address common.Address, backend bind.ContractBackend) (*DynamicSplittableT0ken, error) {
	contract, err := bindDynamicSplittableT0ken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0ken{DynamicSplittableT0kenCaller: DynamicSplittableT0kenCaller{contract: contract}, DynamicSplittableT0kenTransactor: DynamicSplittableT0kenTransactor{contract: contract}, DynamicSplittableT0kenFilterer: DynamicSplittableT0kenFilterer{contract: contract}}, nil
}

// NewDynamicSplittableT0kenCaller creates a new read-only instance of DynamicSplittableT0ken, bound to a specific deployed contract.
func NewDynamicSplittableT0kenCaller(address common.Address, caller bind.ContractCaller) (*DynamicSplittableT0kenCaller, error) {
	contract, err := bindDynamicSplittableT0ken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenCaller{contract: contract}, nil
}

// NewDynamicSplittableT0kenTransactor creates a new write-only instance of DynamicSplittableT0ken, bound to a specific deployed contract.
func NewDynamicSplittableT0kenTransactor(address common.Address, transactor bind.ContractTransactor) (*DynamicSplittableT0kenTransactor, error) {
	contract, err := bindDynamicSplittableT0ken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenTransactor{contract: contract}, nil
}

// NewDynamicSplittableT0kenFilterer creates a new log filterer instance of DynamicSplittableT0ken, bound to a specific deployed contract.
func NewDynamicSplittableT0kenFilterer(address common.Address, filterer bind.ContractFilterer) (*DynamicSplittableT0kenFilterer, error) {
	contract, err := bindDynamicSplittableT0ken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenFilterer{contract: contract}, nil
}

// bindDynamicSplittableT0ken binds a generic wrapper to an already deployed contract.
func bindDynamicSplittableT0ken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DynamicSplittableT0kenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DynamicSplittableT0ken *DynamicSplittableT0kenRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DynamicSplittableT0ken.Contract.DynamicSplittableT0kenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DynamicSplittableT0ken *DynamicSplittableT0kenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.DynamicSplittableT0kenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DynamicSplittableT0ken *DynamicSplittableT0kenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.DynamicSplittableT0kenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DynamicSplittableT0ken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.contract.Transact(opts, method, params...)
}

// ZEROADDRESS is a free data retrieval call binding the contract method 0x538ba4f9.
//
// Solidity: function ZERO_ADDRESS() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) ZEROADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "ZERO_ADDRESS")
	return *ret0, err
}

// ZEROADDRESS is a free data retrieval call binding the contract method 0x538ba4f9.
//
// Solidity: function ZERO_ADDRESS() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) ZEROADDRESS() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.ZEROADDRESS(&_DynamicSplittableT0ken.CallOpts)
}

// ZEROADDRESS is a free data retrieval call binding the contract method 0x538ba4f9.
//
// Solidity: function ZERO_ADDRESS() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) ZEROADDRESS() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.ZEROADDRESS(&_DynamicSplittableT0ken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(addrOwner address, spender address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Allowance(opts *bind.CallOpts, addrOwner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "allowance", addrOwner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(addrOwner address, spender address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Allowance(addrOwner common.Address, spender common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.Allowance(&_DynamicSplittableT0ken.CallOpts, addrOwner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(addrOwner address, spender address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Allowance(addrOwner common.Address, spender common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.Allowance(&_DynamicSplittableT0ken.CallOpts, addrOwner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(addr address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) BalanceOf(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "balanceOf", addr)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(addr address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) BalanceOf(addr common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.BalanceOf(&_DynamicSplittableT0ken.CallOpts, addr)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(addr address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) BalanceOf(addr common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.BalanceOf(&_DynamicSplittableT0ken.CallOpts, addr)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "balances", arg0)
	return *ret0, err
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.Balances(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.Balances(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// Cancellations is a free data retrieval call binding the contract method 0x34a84827.
//
// Solidity: function cancellations( address) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Cancellations(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "cancellations", arg0)
	return *ret0, err
}

// Cancellations is a free data retrieval call binding the contract method 0x34a84827.
//
// Solidity: function cancellations( address) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Cancellations(arg0 common.Address) (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Cancellations(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// Cancellations is a free data retrieval call binding the contract method 0x34a84827.
//
// Solidity: function cancellations( address) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Cancellations(arg0 common.Address) (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Cancellations(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// Compliance is a free data retrieval call binding the contract method 0x6290865d.
//
// Solidity: function compliance() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Compliance(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "compliance")
	return *ret0, err
}

// Compliance is a free data retrieval call binding the contract method 0x6290865d.
//
// Solidity: function compliance() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Compliance() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Compliance(&_DynamicSplittableT0ken.CallOpts)
}

// Compliance is a free data retrieval call binding the contract method 0x6290865d.
//
// Solidity: function compliance() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Compliance() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Compliance(&_DynamicSplittableT0ken.CallOpts)
}

// CurrentSplitIndex is a free data retrieval call binding the contract method 0x17344a90.
//
// Solidity: function currentSplitIndex() constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) CurrentSplitIndex(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "currentSplitIndex")
	return *ret0, err
}

// CurrentSplitIndex is a free data retrieval call binding the contract method 0x17344a90.
//
// Solidity: function currentSplitIndex() constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) CurrentSplitIndex() (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.CurrentSplitIndex(&_DynamicSplittableT0ken.CallOpts)
}

// CurrentSplitIndex is a free data retrieval call binding the contract method 0x17344a90.
//
// Solidity: function currentSplitIndex() constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) CurrentSplitIndex() (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.CurrentSplitIndex(&_DynamicSplittableT0ken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Decimals() (uint8, error) {
	return _DynamicSplittableT0ken.Contract.Decimals(&_DynamicSplittableT0ken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Decimals() (uint8, error) {
	return _DynamicSplittableT0ken.Contract.Decimals(&_DynamicSplittableT0ken.CallOpts)
}

// GetSuperseded is a free data retrieval call binding the contract method 0xe37ccac7.
//
// Solidity: function getSuperseded(addr address) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) GetSuperseded(opts *bind.CallOpts, addr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "getSuperseded", addr)
	return *ret0, err
}

// GetSuperseded is a free data retrieval call binding the contract method 0xe37ccac7.
//
// Solidity: function getSuperseded(addr address) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) GetSuperseded(addr common.Address) (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.GetSuperseded(&_DynamicSplittableT0ken.CallOpts, addr)
}

// GetSuperseded is a free data retrieval call binding the contract method 0xe37ccac7.
//
// Solidity: function getSuperseded(addr address) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) GetSuperseded(addr common.Address) (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.GetSuperseded(&_DynamicSplittableT0ken.CallOpts, addr)
}

// HolderAt is a free data retrieval call binding the contract method 0x8082a929.
//
// Solidity: function holderAt(index int256) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) HolderAt(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "holderAt", index)
	return *ret0, err
}

// HolderAt is a free data retrieval call binding the contract method 0x8082a929.
//
// Solidity: function holderAt(index int256) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) HolderAt(index *big.Int) (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.HolderAt(&_DynamicSplittableT0ken.CallOpts, index)
}

// HolderAt is a free data retrieval call binding the contract method 0x8082a929.
//
// Solidity: function holderAt(index int256) constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) HolderAt(index *big.Int) (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.HolderAt(&_DynamicSplittableT0ken.CallOpts, index)
}

// Holders is a free data retrieval call binding the contract method 0x8188f71c.
//
// Solidity: function holders() constant returns(count int256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Holders(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "holders")
	return *ret0, err
}

// Holders is a free data retrieval call binding the contract method 0x8188f71c.
//
// Solidity: function holders() constant returns(count int256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Holders() (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.Holders(&_DynamicSplittableT0ken.CallOpts)
}

// Holders is a free data retrieval call binding the contract method 0x8188f71c.
//
// Solidity: function holders() constant returns(count int256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Holders() (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.Holders(&_DynamicSplittableT0ken.CallOpts)
}

// HoldersSplit is a free data retrieval call binding the contract method 0xb0b89d92.
//
// Solidity: function holdersSplit( address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) HoldersSplit(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "holdersSplit", arg0)
	return *ret0, err
}

// HoldersSplit is a free data retrieval call binding the contract method 0xb0b89d92.
//
// Solidity: function holdersSplit( address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) HoldersSplit(arg0 common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.HoldersSplit(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// HoldersSplit is a free data retrieval call binding the contract method 0xb0b89d92.
//
// Solidity: function holdersSplit( address) constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) HoldersSplit(arg0 common.Address) (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.HoldersSplit(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// IsHolder is a free data retrieval call binding the contract method 0xd4d7b19a.
//
// Solidity: function isHolder(addr address) constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) IsHolder(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "isHolder", addr)
	return *ret0, err
}

// IsHolder is a free data retrieval call binding the contract method 0xd4d7b19a.
//
// Solidity: function isHolder(addr address) constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) IsHolder(addr common.Address) (bool, error) {
	return _DynamicSplittableT0ken.Contract.IsHolder(&_DynamicSplittableT0ken.CallOpts, addr)
}

// IsHolder is a free data retrieval call binding the contract method 0xd4d7b19a.
//
// Solidity: function isHolder(addr address) constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) IsHolder(addr common.Address) (bool, error) {
	return _DynamicSplittableT0ken.Contract.IsHolder(&_DynamicSplittableT0ken.CallOpts, addr)
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) IsLocked(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "isLocked")
	return *ret0, err
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) IsLocked() (bool, error) {
	return _DynamicSplittableT0ken.Contract.IsLocked(&_DynamicSplittableT0ken.CallOpts)
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) IsLocked() (bool, error) {
	return _DynamicSplittableT0ken.Contract.IsLocked(&_DynamicSplittableT0ken.CallOpts)
}

// IsSuperseded is a free data retrieval call binding the contract method 0x2da7293e.
//
// Solidity: function isSuperseded(addr address) constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) IsSuperseded(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "isSuperseded", addr)
	return *ret0, err
}

// IsSuperseded is a free data retrieval call binding the contract method 0x2da7293e.
//
// Solidity: function isSuperseded(addr address) constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) IsSuperseded(addr common.Address) (bool, error) {
	return _DynamicSplittableT0ken.Contract.IsSuperseded(&_DynamicSplittableT0ken.CallOpts, addr)
}

// IsSuperseded is a free data retrieval call binding the contract method 0x2da7293e.
//
// Solidity: function isSuperseded(addr address) constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) IsSuperseded(addr common.Address) (bool, error) {
	return _DynamicSplittableT0ken.Contract.IsSuperseded(&_DynamicSplittableT0ken.CallOpts, addr)
}

// IssuanceFinished is a free data retrieval call binding the contract method 0x4662299a.
//
// Solidity: function issuanceFinished() constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) IssuanceFinished(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "issuanceFinished")
	return *ret0, err
}

// IssuanceFinished is a free data retrieval call binding the contract method 0x4662299a.
//
// Solidity: function issuanceFinished() constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) IssuanceFinished() (bool, error) {
	return _DynamicSplittableT0ken.Contract.IssuanceFinished(&_DynamicSplittableT0ken.CallOpts)
}

// IssuanceFinished is a free data retrieval call binding the contract method 0x4662299a.
//
// Solidity: function issuanceFinished() constant returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) IssuanceFinished() (bool, error) {
	return _DynamicSplittableT0ken.Contract.IssuanceFinished(&_DynamicSplittableT0ken.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "issuer")
	return *ret0, err
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Issuer() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Issuer(&_DynamicSplittableT0ken.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Issuer() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Issuer(&_DynamicSplittableT0ken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Name() (string, error) {
	return _DynamicSplittableT0ken.Contract.Name(&_DynamicSplittableT0ken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Name() (string, error) {
	return _DynamicSplittableT0ken.Contract.Name(&_DynamicSplittableT0ken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Owner() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Owner(&_DynamicSplittableT0ken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Owner() (common.Address, error) {
	return _DynamicSplittableT0ken.Contract.Owner(&_DynamicSplittableT0ken.CallOpts)
}

// Splits is a free data retrieval call binding the contract method 0x884c3006.
//
// Solidity: function splits( uint256) constant returns(numerator uint128, denominator uint128)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Splits(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Numerator   *big.Int
	Denominator *big.Int
}, error) {
	ret := new(struct {
		Numerator   *big.Int
		Denominator *big.Int
	})
	out := ret
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "splits", arg0)
	return *ret, err
}

// Splits is a free data retrieval call binding the contract method 0x884c3006.
//
// Solidity: function splits( uint256) constant returns(numerator uint128, denominator uint128)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Splits(arg0 *big.Int) (struct {
	Numerator   *big.Int
	Denominator *big.Int
}, error) {
	return _DynamicSplittableT0ken.Contract.Splits(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// Splits is a free data retrieval call binding the contract method 0x884c3006.
//
// Solidity: function splits( uint256) constant returns(numerator uint128, denominator uint128)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Splits(arg0 *big.Int) (struct {
	Numerator   *big.Int
	Denominator *big.Int
}, error) {
	return _DynamicSplittableT0ken.Contract.Splits(&_DynamicSplittableT0ken.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Symbol() (string, error) {
	return _DynamicSplittableT0ken.Contract.Symbol(&_DynamicSplittableT0ken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) Symbol() (string, error) {
	return _DynamicSplittableT0ken.Contract.Symbol(&_DynamicSplittableT0ken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DynamicSplittableT0ken.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) TotalSupply() (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.TotalSupply(&_DynamicSplittableT0ken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenCallerSession) TotalSupply() (*big.Int, error) {
	return _DynamicSplittableT0ken.Contract.TotalSupply(&_DynamicSplittableT0ken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "approve", spender, tokens)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Approve(spender common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.Approve(&_DynamicSplittableT0ken.TransactOpts, spender, tokens)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) Approve(spender common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.Approve(&_DynamicSplittableT0ken.TransactOpts, spender, tokens)
}

// CancelAndReissue is a paid mutator transaction binding the contract method 0x79f64720.
//
// Solidity: function cancelAndReissue(original address, replacement address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) CancelAndReissue(opts *bind.TransactOpts, original common.Address, replacement common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "cancelAndReissue", original, replacement)
}

// CancelAndReissue is a paid mutator transaction binding the contract method 0x79f64720.
//
// Solidity: function cancelAndReissue(original address, replacement address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) CancelAndReissue(original common.Address, replacement common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.CancelAndReissue(&_DynamicSplittableT0ken.TransactOpts, original, replacement)
}

// CancelAndReissue is a paid mutator transaction binding the contract method 0x79f64720.
//
// Solidity: function cancelAndReissue(original address, replacement address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) CancelAndReissue(original common.Address, replacement common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.CancelAndReissue(&_DynamicSplittableT0ken.TransactOpts, original, replacement)
}

// FinishIssuance is a paid mutator transaction binding the contract method 0xc422293b.
//
// Solidity: function finishIssuance() returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) FinishIssuance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "finishIssuance")
}

// FinishIssuance is a paid mutator transaction binding the contract method 0xc422293b.
//
// Solidity: function finishIssuance() returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) FinishIssuance() (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.FinishIssuance(&_DynamicSplittableT0ken.TransactOpts)
}

// FinishIssuance is a paid mutator transaction binding the contract method 0xc422293b.
//
// Solidity: function finishIssuance() returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) FinishIssuance() (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.FinishIssuance(&_DynamicSplittableT0ken.TransactOpts)
}

// IssueTokens is a paid mutator transaction binding the contract method 0xa5820daa.
//
// Solidity: function issueTokens(quantity uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) IssueTokens(opts *bind.TransactOpts, quantity *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "issueTokens", quantity)
}

// IssueTokens is a paid mutator transaction binding the contract method 0xa5820daa.
//
// Solidity: function issueTokens(quantity uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) IssueTokens(quantity *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.IssueTokens(&_DynamicSplittableT0ken.TransactOpts, quantity)
}

// IssueTokens is a paid mutator transaction binding the contract method 0xa5820daa.
//
// Solidity: function issueTokens(quantity uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) IssueTokens(quantity *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.IssueTokens(&_DynamicSplittableT0ken.TransactOpts, quantity)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Kill() (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.Kill(&_DynamicSplittableT0ken.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) Kill() (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.Kill(&_DynamicSplittableT0ken.TransactOpts)
}

// RemoveShareholder is a paid mutator transaction binding the contract method 0x9babdad6.
//
// Solidity: function removeShareholder(addr address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) RemoveShareholder(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "removeShareholder", addr)
}

// RemoveShareholder is a paid mutator transaction binding the contract method 0x9babdad6.
//
// Solidity: function removeShareholder(addr address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) RemoveShareholder(addr common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.RemoveShareholder(&_DynamicSplittableT0ken.TransactOpts, addr)
}

// RemoveShareholder is a paid mutator transaction binding the contract method 0x9babdad6.
//
// Solidity: function removeShareholder(addr address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) RemoveShareholder(addr common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.RemoveShareholder(&_DynamicSplittableT0ken.TransactOpts, addr)
}

// SetCompliance is a paid mutator transaction binding the contract method 0xf8981789.
//
// Solidity: function setCompliance(newComplianceAddress address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) SetCompliance(opts *bind.TransactOpts, newComplianceAddress common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "setCompliance", newComplianceAddress)
}

// SetCompliance is a paid mutator transaction binding the contract method 0xf8981789.
//
// Solidity: function setCompliance(newComplianceAddress address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) SetCompliance(newComplianceAddress common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SetCompliance(&_DynamicSplittableT0ken.TransactOpts, newComplianceAddress)
}

// SetCompliance is a paid mutator transaction binding the contract method 0xf8981789.
//
// Solidity: function setCompliance(newComplianceAddress address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) SetCompliance(newComplianceAddress common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SetCompliance(&_DynamicSplittableT0ken.TransactOpts, newComplianceAddress)
}

// SetIssuer is a paid mutator transaction binding the contract method 0x55cc4e57.
//
// Solidity: function setIssuer(newIssuer address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) SetIssuer(opts *bind.TransactOpts, newIssuer common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "setIssuer", newIssuer)
}

// SetIssuer is a paid mutator transaction binding the contract method 0x55cc4e57.
//
// Solidity: function setIssuer(newIssuer address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) SetIssuer(newIssuer common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SetIssuer(&_DynamicSplittableT0ken.TransactOpts, newIssuer)
}

// SetIssuer is a paid mutator transaction binding the contract method 0x55cc4e57.
//
// Solidity: function setIssuer(newIssuer address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) SetIssuer(newIssuer common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SetIssuer(&_DynamicSplittableT0ken.TransactOpts, newIssuer)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) SetLocked(opts *bind.TransactOpts, locked bool) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "setLocked", locked)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) SetLocked(locked bool) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SetLocked(&_DynamicSplittableT0ken.TransactOpts, locked)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) SetLocked(locked bool) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SetLocked(&_DynamicSplittableT0ken.TransactOpts, locked)
}

// SplitTotalSupply is a paid mutator transaction binding the contract method 0x98d34b9b.
//
// Solidity: function splitTotalSupply(cashedOutTokenQuantity uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) SplitTotalSupply(opts *bind.TransactOpts, cashedOutTokenQuantity *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "splitTotalSupply", cashedOutTokenQuantity)
}

// SplitTotalSupply is a paid mutator transaction binding the contract method 0x98d34b9b.
//
// Solidity: function splitTotalSupply(cashedOutTokenQuantity uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) SplitTotalSupply(cashedOutTokenQuantity *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SplitTotalSupply(&_DynamicSplittableT0ken.TransactOpts, cashedOutTokenQuantity)
}

// SplitTotalSupply is a paid mutator transaction binding the contract method 0x98d34b9b.
//
// Solidity: function splitTotalSupply(cashedOutTokenQuantity uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) SplitTotalSupply(cashedOutTokenQuantity *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.SplitTotalSupply(&_DynamicSplittableT0ken.TransactOpts, cashedOutTokenQuantity)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "transfer", to, tokens)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) Transfer(to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.Transfer(&_DynamicSplittableT0ken.TransactOpts, to, tokens)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) Transfer(to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.Transfer(&_DynamicSplittableT0ken.TransactOpts, to, tokens)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "transferFrom", from, to, tokens)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) TransferFrom(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.TransferFrom(&_DynamicSplittableT0ken.TransactOpts, from, to, tokens)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) TransferFrom(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.TransferFrom(&_DynamicSplittableT0ken.TransactOpts, from, to, tokens)
}

// TransferOverride is a paid mutator transaction binding the contract method 0x80318be8.
//
// Solidity: function transferOverride(from address, to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) TransferOverride(opts *bind.TransactOpts, from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "transferOverride", from, to, tokens)
}

// TransferOverride is a paid mutator transaction binding the contract method 0x80318be8.
//
// Solidity: function transferOverride(from address, to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) TransferOverride(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.TransferOverride(&_DynamicSplittableT0ken.TransactOpts, from, to, tokens)
}

// TransferOverride is a paid mutator transaction binding the contract method 0x80318be8.
//
// Solidity: function transferOverride(from address, to address, tokens uint256) returns(bool)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) TransferOverride(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.TransferOverride(&_DynamicSplittableT0ken.TransactOpts, from, to, tokens)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) TransferOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "transferOwner", newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.TransferOwner(&_DynamicSplittableT0ken.TransactOpts, newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.TransferOwner(&_DynamicSplittableT0ken.TransactOpts, newOwner)
}

// UpdateSplit is a paid mutator transaction binding the contract method 0x872a72ea.
//
// Solidity: function updateSplit(numerator uint128, denominator uint128) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactor) UpdateSplit(opts *bind.TransactOpts, numerator *big.Int, denominator *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.contract.Transact(opts, "updateSplit", numerator, denominator)
}

// UpdateSplit is a paid mutator transaction binding the contract method 0x872a72ea.
//
// Solidity: function updateSplit(numerator uint128, denominator uint128) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenSession) UpdateSplit(numerator *big.Int, denominator *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.UpdateSplit(&_DynamicSplittableT0ken.TransactOpts, numerator, denominator)
}

// UpdateSplit is a paid mutator transaction binding the contract method 0x872a72ea.
//
// Solidity: function updateSplit(numerator uint128, denominator uint128) returns()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenTransactorSession) UpdateSplit(numerator *big.Int, denominator *big.Int) (*types.Transaction, error) {
	return _DynamicSplittableT0ken.Contract.UpdateSplit(&_DynamicSplittableT0ken.TransactOpts, numerator, denominator)
}

// DynamicSplittableT0kenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenApprovalIterator struct {
	Event *DynamicSplittableT0kenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenApproval represents a Approval event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DynamicSplittableT0kenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenApprovalIterator{contract: _DynamicSplittableT0ken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenApproval)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenIssuanceIterator is returned from FilterIssuance and is used to iterate over the raw logs and unpacked data for Issuance events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenIssuanceIterator struct {
	Event *DynamicSplittableT0kenIssuance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenIssuanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenIssuance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenIssuance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenIssuanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenIssuanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenIssuance represents a Issuance event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenIssuance struct {
	To     common.Address
	Tokens *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuance is a free log retrieval operation binding the contract event 0x9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb.
//
// Solidity: e Issuance(to indexed address, tokens uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterIssuance(opts *bind.FilterOpts, to []common.Address) (*DynamicSplittableT0kenIssuanceIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "Issuance", toRule)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenIssuanceIterator{contract: _DynamicSplittableT0ken.contract, event: "Issuance", logs: logs, sub: sub}, nil
}

// WatchIssuance is a free log subscription operation binding the contract event 0x9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb.
//
// Solidity: e Issuance(to indexed address, tokens uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchIssuance(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenIssuance, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "Issuance", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenIssuance)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "Issuance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenIssuanceFinishedIterator is returned from FilterIssuanceFinished and is used to iterate over the raw logs and unpacked data for IssuanceFinished events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenIssuanceFinishedIterator struct {
	Event *DynamicSplittableT0kenIssuanceFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenIssuanceFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenIssuanceFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenIssuanceFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenIssuanceFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenIssuanceFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenIssuanceFinished represents a IssuanceFinished event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenIssuanceFinished struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterIssuanceFinished is a free log retrieval operation binding the contract event 0x29fe76cc5ca143e91eadf7242fda487fcef09318c1237900f958abe1e2c5beff.
//
// Solidity: e IssuanceFinished()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterIssuanceFinished(opts *bind.FilterOpts) (*DynamicSplittableT0kenIssuanceFinishedIterator, error) {

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "IssuanceFinished")
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenIssuanceFinishedIterator{contract: _DynamicSplittableT0ken.contract, event: "IssuanceFinished", logs: logs, sub: sub}, nil
}

// WatchIssuanceFinished is a free log subscription operation binding the contract event 0x29fe76cc5ca143e91eadf7242fda487fcef09318c1237900f958abe1e2c5beff.
//
// Solidity: e IssuanceFinished()
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchIssuanceFinished(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenIssuanceFinished) (event.Subscription, error) {

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "IssuanceFinished")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenIssuanceFinished)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "IssuanceFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenIssuerSetIterator is returned from FilterIssuerSet and is used to iterate over the raw logs and unpacked data for IssuerSet events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenIssuerSetIterator struct {
	Event *DynamicSplittableT0kenIssuerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenIssuerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenIssuerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenIssuerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenIssuerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenIssuerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenIssuerSet represents a IssuerSet event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenIssuerSet struct {
	PreviousIssuer common.Address
	NewIssuer      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterIssuerSet is a free log retrieval operation binding the contract event 0xf7189b85d7899f5a32d733e6584c4f1dcdff0274f09d969d186c1797673ede11.
//
// Solidity: e IssuerSet(previousIssuer indexed address, newIssuer indexed address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterIssuerSet(opts *bind.FilterOpts, previousIssuer []common.Address, newIssuer []common.Address) (*DynamicSplittableT0kenIssuerSetIterator, error) {

	var previousIssuerRule []interface{}
	for _, previousIssuerItem := range previousIssuer {
		previousIssuerRule = append(previousIssuerRule, previousIssuerItem)
	}
	var newIssuerRule []interface{}
	for _, newIssuerItem := range newIssuer {
		newIssuerRule = append(newIssuerRule, newIssuerItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "IssuerSet", previousIssuerRule, newIssuerRule)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenIssuerSetIterator{contract: _DynamicSplittableT0ken.contract, event: "IssuerSet", logs: logs, sub: sub}, nil
}

// WatchIssuerSet is a free log subscription operation binding the contract event 0xf7189b85d7899f5a32d733e6584c4f1dcdff0274f09d969d186c1797673ede11.
//
// Solidity: e IssuerSet(previousIssuer indexed address, newIssuer indexed address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchIssuerSet(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenIssuerSet, previousIssuer []common.Address, newIssuer []common.Address) (event.Subscription, error) {

	var previousIssuerRule []interface{}
	for _, previousIssuerItem := range previousIssuer {
		previousIssuerRule = append(previousIssuerRule, previousIssuerItem)
	}
	var newIssuerRule []interface{}
	for _, newIssuerItem := range newIssuer {
		newIssuerRule = append(newIssuerRule, newIssuerItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "IssuerSet", previousIssuerRule, newIssuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenIssuerSet)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "IssuerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenOwnerTransferredIterator is returned from FilterOwnerTransferred and is used to iterate over the raw logs and unpacked data for OwnerTransferred events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenOwnerTransferredIterator struct {
	Event *DynamicSplittableT0kenOwnerTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenOwnerTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenOwnerTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenOwnerTransferred represents a OwnerTransferred event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenOwnerTransferred struct {
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerTransferred is a free log retrieval operation binding the contract event 0x8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c9.
//
// Solidity: e OwnerTransferred(oldOwner indexed address, newOwner indexed address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterOwnerTransferred(opts *bind.FilterOpts, oldOwner []common.Address, newOwner []common.Address) (*DynamicSplittableT0kenOwnerTransferredIterator, error) {

	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "OwnerTransferred", oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenOwnerTransferredIterator{contract: _DynamicSplittableT0ken.contract, event: "OwnerTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnerTransferred is a free log subscription operation binding the contract event 0x8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c9.
//
// Solidity: e OwnerTransferred(oldOwner indexed address, newOwner indexed address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchOwnerTransferred(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenOwnerTransferred, oldOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "OwnerTransferred", oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenOwnerTransferred)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "OwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenShareholderAddedIterator is returned from FilterShareholderAdded and is used to iterate over the raw logs and unpacked data for ShareholderAdded events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenShareholderAddedIterator struct {
	Event *DynamicSplittableT0kenShareholderAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenShareholderAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenShareholderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenShareholderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenShareholderAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenShareholderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenShareholderAdded represents a ShareholderAdded event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenShareholderAdded struct {
	Shareholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareholderAdded is a free log retrieval operation binding the contract event 0x3082c1c4977de80c4f67ee77b56b282610ec93a7ecbcc31b551e0ac2f7bd0395.
//
// Solidity: e ShareholderAdded(shareholder address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterShareholderAdded(opts *bind.FilterOpts) (*DynamicSplittableT0kenShareholderAddedIterator, error) {

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "ShareholderAdded")
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenShareholderAddedIterator{contract: _DynamicSplittableT0ken.contract, event: "ShareholderAdded", logs: logs, sub: sub}, nil
}

// WatchShareholderAdded is a free log subscription operation binding the contract event 0x3082c1c4977de80c4f67ee77b56b282610ec93a7ecbcc31b551e0ac2f7bd0395.
//
// Solidity: e ShareholderAdded(shareholder address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchShareholderAdded(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenShareholderAdded) (event.Subscription, error) {

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "ShareholderAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenShareholderAdded)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "ShareholderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenShareholderRemovedIterator is returned from FilterShareholderRemoved and is used to iterate over the raw logs and unpacked data for ShareholderRemoved events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenShareholderRemovedIterator struct {
	Event *DynamicSplittableT0kenShareholderRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenShareholderRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenShareholderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenShareholderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenShareholderRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenShareholderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenShareholderRemoved represents a ShareholderRemoved event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenShareholderRemoved struct {
	Shareholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareholderRemoved is a free log retrieval operation binding the contract event 0x7ba114ff3d9844510a088eea94cd35562e7c97a2d36a418b37b2e61e5c77affe.
//
// Solidity: e ShareholderRemoved(shareholder address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterShareholderRemoved(opts *bind.FilterOpts) (*DynamicSplittableT0kenShareholderRemovedIterator, error) {

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "ShareholderRemoved")
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenShareholderRemovedIterator{contract: _DynamicSplittableT0ken.contract, event: "ShareholderRemoved", logs: logs, sub: sub}, nil
}

// WatchShareholderRemoved is a free log subscription operation binding the contract event 0x7ba114ff3d9844510a088eea94cd35562e7c97a2d36a418b37b2e61e5c77affe.
//
// Solidity: e ShareholderRemoved(shareholder address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchShareholderRemoved(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenShareholderRemoved) (event.Subscription, error) {

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "ShareholderRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenShareholderRemoved)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "ShareholderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenTransferIterator struct {
	Event *DynamicSplittableT0kenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenTransfer represents a Transfer event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DynamicSplittableT0kenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenTransferIterator{contract: _DynamicSplittableT0ken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenTransfer)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DynamicSplittableT0kenVerifiedAddressSupersededIterator is returned from FilterVerifiedAddressSuperseded and is used to iterate over the raw logs and unpacked data for VerifiedAddressSuperseded events raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenVerifiedAddressSupersededIterator struct {
	Event *DynamicSplittableT0kenVerifiedAddressSuperseded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DynamicSplittableT0kenVerifiedAddressSupersededIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DynamicSplittableT0kenVerifiedAddressSuperseded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DynamicSplittableT0kenVerifiedAddressSuperseded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DynamicSplittableT0kenVerifiedAddressSupersededIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DynamicSplittableT0kenVerifiedAddressSupersededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DynamicSplittableT0kenVerifiedAddressSuperseded represents a VerifiedAddressSuperseded event raised by the DynamicSplittableT0ken contract.
type DynamicSplittableT0kenVerifiedAddressSuperseded struct {
	Original    common.Address
	Replacement common.Address
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterVerifiedAddressSuperseded is a free log retrieval operation binding the contract event 0xb64971100522354f3d25283cb14e2eefcb0dd26a757482ccfe42479d0a686857.
//
// Solidity: e VerifiedAddressSuperseded(original indexed address, replacement indexed address, sender indexed address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) FilterVerifiedAddressSuperseded(opts *bind.FilterOpts, original []common.Address, replacement []common.Address, sender []common.Address) (*DynamicSplittableT0kenVerifiedAddressSupersededIterator, error) {

	var originalRule []interface{}
	for _, originalItem := range original {
		originalRule = append(originalRule, originalItem)
	}
	var replacementRule []interface{}
	for _, replacementItem := range replacement {
		replacementRule = append(replacementRule, replacementItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.FilterLogs(opts, "VerifiedAddressSuperseded", originalRule, replacementRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DynamicSplittableT0kenVerifiedAddressSupersededIterator{contract: _DynamicSplittableT0ken.contract, event: "VerifiedAddressSuperseded", logs: logs, sub: sub}, nil
}

// WatchVerifiedAddressSuperseded is a free log subscription operation binding the contract event 0xb64971100522354f3d25283cb14e2eefcb0dd26a757482ccfe42479d0a686857.
//
// Solidity: e VerifiedAddressSuperseded(original indexed address, replacement indexed address, sender indexed address)
func (_DynamicSplittableT0ken *DynamicSplittableT0kenFilterer) WatchVerifiedAddressSuperseded(opts *bind.WatchOpts, sink chan<- *DynamicSplittableT0kenVerifiedAddressSuperseded, original []common.Address, replacement []common.Address, sender []common.Address) (event.Subscription, error) {

	var originalRule []interface{}
	for _, originalItem := range original {
		originalRule = append(originalRule, originalItem)
	}
	var replacementRule []interface{}
	for _, replacementItem := range replacement {
		replacementRule = append(replacementRule, replacementItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DynamicSplittableT0ken.contract.WatchLogs(opts, "VerifiedAddressSuperseded", originalRule, replacementRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DynamicSplittableT0kenVerifiedAddressSuperseded)
				if err := _DynamicSplittableT0ken.contract.UnpackLog(event, "VerifiedAddressSuperseded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
