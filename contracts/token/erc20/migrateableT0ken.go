// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// MigrateableT0kenABI is the input ABI used to generate the binding from.
const MigrateableT0kenABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSuperseded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cancellations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"original\",\"type\":\"address\"},{\"name\":\"replacement\",\"type\":\"address\"}],\"name\":\"cancelAndReissue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferOverride\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"holderAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"name\":\"count\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"migrateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPredecessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"predecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIssuance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSuperseded\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newComplianceAddress\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"SucceededBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"predecessor\",\"type\":\"address\"}],\"name\":\"PrecededBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"original\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"replacement\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressSuperseded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousIssuer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"IssuerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IssuanceFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"ShareholderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"ShareholderRemoved\",\"type\":\"event\"}]"

// MigrateableT0kenBin is the compiled bytecode used for deploying new contracts.
const MigrateableT0kenBin = ``

// DeployMigrateableT0ken deploys a new Ethereum contract, binding an instance of MigrateableT0ken to it.
func DeployMigrateableT0ken(auth *bind.TransactOpts, backend bind.ContractBackend, tokenName string, tokenSymbol string, decimalPlaces uint8) (common.Address, *types.Transaction, *MigrateableT0ken, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateableT0kenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MigrateableT0kenBin), backend, tokenName, tokenSymbol, decimalPlaces)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateableT0ken{MigrateableT0kenCaller: MigrateableT0kenCaller{contract: contract}, MigrateableT0kenTransactor: MigrateableT0kenTransactor{contract: contract}, MigrateableT0kenFilterer: MigrateableT0kenFilterer{contract: contract}}, nil
}

// MigrateableT0ken is an auto generated Go binding around an Ethereum contract.
type MigrateableT0ken struct {
	MigrateableT0kenCaller     // Read-only binding to the contract
	MigrateableT0kenTransactor // Write-only binding to the contract
	MigrateableT0kenFilterer   // Log filterer for contract events
}

// MigrateableT0kenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateableT0kenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateableT0kenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateableT0kenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateableT0kenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateableT0kenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateableT0kenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateableT0kenSession struct {
	Contract     *MigrateableT0ken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MigrateableT0kenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateableT0kenCallerSession struct {
	Contract *MigrateableT0kenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MigrateableT0kenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateableT0kenTransactorSession struct {
	Contract     *MigrateableT0kenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MigrateableT0kenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateableT0kenRaw struct {
	Contract *MigrateableT0ken // Generic contract binding to access the raw methods on
}

// MigrateableT0kenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateableT0kenCallerRaw struct {
	Contract *MigrateableT0kenCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateableT0kenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateableT0kenTransactorRaw struct {
	Contract *MigrateableT0kenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateableT0ken creates a new instance of MigrateableT0ken, bound to a specific deployed contract.
func NewMigrateableT0ken(address common.Address, backend bind.ContractBackend) (*MigrateableT0ken, error) {
	contract, err := bindMigrateableT0ken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0ken{MigrateableT0kenCaller: MigrateableT0kenCaller{contract: contract}, MigrateableT0kenTransactor: MigrateableT0kenTransactor{contract: contract}, MigrateableT0kenFilterer: MigrateableT0kenFilterer{contract: contract}}, nil
}

// NewMigrateableT0kenCaller creates a new read-only instance of MigrateableT0ken, bound to a specific deployed contract.
func NewMigrateableT0kenCaller(address common.Address, caller bind.ContractCaller) (*MigrateableT0kenCaller, error) {
	contract, err := bindMigrateableT0ken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenCaller{contract: contract}, nil
}

// NewMigrateableT0kenTransactor creates a new write-only instance of MigrateableT0ken, bound to a specific deployed contract.
func NewMigrateableT0kenTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateableT0kenTransactor, error) {
	contract, err := bindMigrateableT0ken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenTransactor{contract: contract}, nil
}

// NewMigrateableT0kenFilterer creates a new log filterer instance of MigrateableT0ken, bound to a specific deployed contract.
func NewMigrateableT0kenFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateableT0kenFilterer, error) {
	contract, err := bindMigrateableT0ken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenFilterer{contract: contract}, nil
}

// bindMigrateableT0ken binds a generic wrapper to an already deployed contract.
func bindMigrateableT0ken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateableT0kenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateableT0ken *MigrateableT0kenRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MigrateableT0ken.Contract.MigrateableT0kenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateableT0ken *MigrateableT0kenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.MigrateableT0kenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateableT0ken *MigrateableT0kenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.MigrateableT0kenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateableT0ken *MigrateableT0kenCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MigrateableT0ken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateableT0ken *MigrateableT0kenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateableT0ken *MigrateableT0kenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.contract.Transact(opts, method, params...)
}

// ZEROADDRESS is a free data retrieval call binding the contract method 0x538ba4f9.
//
// Solidity: function ZERO_ADDRESS() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) ZEROADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "ZERO_ADDRESS")
	return *ret0, err
}

// ZEROADDRESS is a free data retrieval call binding the contract method 0x538ba4f9.
//
// Solidity: function ZERO_ADDRESS() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) ZEROADDRESS() (common.Address, error) {
	return _MigrateableT0ken.Contract.ZEROADDRESS(&_MigrateableT0ken.CallOpts)
}

// ZEROADDRESS is a free data retrieval call binding the contract method 0x538ba4f9.
//
// Solidity: function ZERO_ADDRESS() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) ZEROADDRESS() (common.Address, error) {
	return _MigrateableT0ken.Contract.ZEROADDRESS(&_MigrateableT0ken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(addrOwner address, spender address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCaller) Allowance(opts *bind.CallOpts, addrOwner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "allowance", addrOwner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(addrOwner address, spender address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenSession) Allowance(addrOwner common.Address, spender common.Address) (*big.Int, error) {
	return _MigrateableT0ken.Contract.Allowance(&_MigrateableT0ken.CallOpts, addrOwner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(addrOwner address, spender address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Allowance(addrOwner common.Address, spender common.Address) (*big.Int, error) {
	return _MigrateableT0ken.Contract.Allowance(&_MigrateableT0ken.CallOpts, addrOwner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(addr address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCaller) BalanceOf(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "balanceOf", addr)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(addr address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenSession) BalanceOf(addr common.Address) (*big.Int, error) {
	return _MigrateableT0ken.Contract.BalanceOf(&_MigrateableT0ken.CallOpts, addr)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(addr address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) BalanceOf(addr common.Address) (*big.Int, error) {
	return _MigrateableT0ken.Contract.BalanceOf(&_MigrateableT0ken.CallOpts, addr)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "balances", arg0)
	return *ret0, err
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _MigrateableT0ken.Contract.Balances(&_MigrateableT0ken.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _MigrateableT0ken.Contract.Balances(&_MigrateableT0ken.CallOpts, arg0)
}

// Cancellations is a free data retrieval call binding the contract method 0x34a84827.
//
// Solidity: function cancellations( address) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) Cancellations(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "cancellations", arg0)
	return *ret0, err
}

// Cancellations is a free data retrieval call binding the contract method 0x34a84827.
//
// Solidity: function cancellations( address) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) Cancellations(arg0 common.Address) (common.Address, error) {
	return _MigrateableT0ken.Contract.Cancellations(&_MigrateableT0ken.CallOpts, arg0)
}

// Cancellations is a free data retrieval call binding the contract method 0x34a84827.
//
// Solidity: function cancellations( address) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Cancellations(arg0 common.Address) (common.Address, error) {
	return _MigrateableT0ken.Contract.Cancellations(&_MigrateableT0ken.CallOpts, arg0)
}

// Compliance is a free data retrieval call binding the contract method 0x6290865d.
//
// Solidity: function compliance() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) Compliance(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "compliance")
	return *ret0, err
}

// Compliance is a free data retrieval call binding the contract method 0x6290865d.
//
// Solidity: function compliance() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) Compliance() (common.Address, error) {
	return _MigrateableT0ken.Contract.Compliance(&_MigrateableT0ken.CallOpts)
}

// Compliance is a free data retrieval call binding the contract method 0x6290865d.
//
// Solidity: function compliance() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Compliance() (common.Address, error) {
	return _MigrateableT0ken.Contract.Compliance(&_MigrateableT0ken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_MigrateableT0ken *MigrateableT0kenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_MigrateableT0ken *MigrateableT0kenSession) Decimals() (uint8, error) {
	return _MigrateableT0ken.Contract.Decimals(&_MigrateableT0ken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Decimals() (uint8, error) {
	return _MigrateableT0ken.Contract.Decimals(&_MigrateableT0ken.CallOpts)
}

// GetSuperseded is a free data retrieval call binding the contract method 0xe37ccac7.
//
// Solidity: function getSuperseded(addr address) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) GetSuperseded(opts *bind.CallOpts, addr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "getSuperseded", addr)
	return *ret0, err
}

// GetSuperseded is a free data retrieval call binding the contract method 0xe37ccac7.
//
// Solidity: function getSuperseded(addr address) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) GetSuperseded(addr common.Address) (common.Address, error) {
	return _MigrateableT0ken.Contract.GetSuperseded(&_MigrateableT0ken.CallOpts, addr)
}

// GetSuperseded is a free data retrieval call binding the contract method 0xe37ccac7.
//
// Solidity: function getSuperseded(addr address) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) GetSuperseded(addr common.Address) (common.Address, error) {
	return _MigrateableT0ken.Contract.GetSuperseded(&_MigrateableT0ken.CallOpts, addr)
}

// HolderAt is a free data retrieval call binding the contract method 0x8082a929.
//
// Solidity: function holderAt(index int256) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) HolderAt(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "holderAt", index)
	return *ret0, err
}

// HolderAt is a free data retrieval call binding the contract method 0x8082a929.
//
// Solidity: function holderAt(index int256) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) HolderAt(index *big.Int) (common.Address, error) {
	return _MigrateableT0ken.Contract.HolderAt(&_MigrateableT0ken.CallOpts, index)
}

// HolderAt is a free data retrieval call binding the contract method 0x8082a929.
//
// Solidity: function holderAt(index int256) constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) HolderAt(index *big.Int) (common.Address, error) {
	return _MigrateableT0ken.Contract.HolderAt(&_MigrateableT0ken.CallOpts, index)
}

// Holders is a free data retrieval call binding the contract method 0x8188f71c.
//
// Solidity: function holders() constant returns(count int256)
func (_MigrateableT0ken *MigrateableT0kenCaller) Holders(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "holders")
	return *ret0, err
}

// Holders is a free data retrieval call binding the contract method 0x8188f71c.
//
// Solidity: function holders() constant returns(count int256)
func (_MigrateableT0ken *MigrateableT0kenSession) Holders() (*big.Int, error) {
	return _MigrateableT0ken.Contract.Holders(&_MigrateableT0ken.CallOpts)
}

// Holders is a free data retrieval call binding the contract method 0x8188f71c.
//
// Solidity: function holders() constant returns(count int256)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Holders() (*big.Int, error) {
	return _MigrateableT0ken.Contract.Holders(&_MigrateableT0ken.CallOpts)
}

// IsHolder is a free data retrieval call binding the contract method 0xd4d7b19a.
//
// Solidity: function isHolder(addr address) constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCaller) IsHolder(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "isHolder", addr)
	return *ret0, err
}

// IsHolder is a free data retrieval call binding the contract method 0xd4d7b19a.
//
// Solidity: function isHolder(addr address) constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) IsHolder(addr common.Address) (bool, error) {
	return _MigrateableT0ken.Contract.IsHolder(&_MigrateableT0ken.CallOpts, addr)
}

// IsHolder is a free data retrieval call binding the contract method 0xd4d7b19a.
//
// Solidity: function isHolder(addr address) constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) IsHolder(addr common.Address) (bool, error) {
	return _MigrateableT0ken.Contract.IsHolder(&_MigrateableT0ken.CallOpts, addr)
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCaller) IsLocked(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "isLocked")
	return *ret0, err
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) IsLocked() (bool, error) {
	return _MigrateableT0ken.Contract.IsLocked(&_MigrateableT0ken.CallOpts)
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) IsLocked() (bool, error) {
	return _MigrateableT0ken.Contract.IsLocked(&_MigrateableT0ken.CallOpts)
}

// IsSuperseded is a free data retrieval call binding the contract method 0x2da7293e.
//
// Solidity: function isSuperseded(addr address) constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCaller) IsSuperseded(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "isSuperseded", addr)
	return *ret0, err
}

// IsSuperseded is a free data retrieval call binding the contract method 0x2da7293e.
//
// Solidity: function isSuperseded(addr address) constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) IsSuperseded(addr common.Address) (bool, error) {
	return _MigrateableT0ken.Contract.IsSuperseded(&_MigrateableT0ken.CallOpts, addr)
}

// IsSuperseded is a free data retrieval call binding the contract method 0x2da7293e.
//
// Solidity: function isSuperseded(addr address) constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) IsSuperseded(addr common.Address) (bool, error) {
	return _MigrateableT0ken.Contract.IsSuperseded(&_MigrateableT0ken.CallOpts, addr)
}

// IssuanceFinished is a free data retrieval call binding the contract method 0x4662299a.
//
// Solidity: function issuanceFinished() constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCaller) IssuanceFinished(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "issuanceFinished")
	return *ret0, err
}

// IssuanceFinished is a free data retrieval call binding the contract method 0x4662299a.
//
// Solidity: function issuanceFinished() constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) IssuanceFinished() (bool, error) {
	return _MigrateableT0ken.Contract.IssuanceFinished(&_MigrateableT0ken.CallOpts)
}

// IssuanceFinished is a free data retrieval call binding the contract method 0x4662299a.
//
// Solidity: function issuanceFinished() constant returns(bool)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) IssuanceFinished() (bool, error) {
	return _MigrateableT0ken.Contract.IssuanceFinished(&_MigrateableT0ken.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "issuer")
	return *ret0, err
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) Issuer() (common.Address, error) {
	return _MigrateableT0ken.Contract.Issuer(&_MigrateableT0ken.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Issuer() (common.Address, error) {
	return _MigrateableT0ken.Contract.Issuer(&_MigrateableT0ken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MigrateableT0ken *MigrateableT0kenCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MigrateableT0ken *MigrateableT0kenSession) Name() (string, error) {
	return _MigrateableT0ken.Contract.Name(&_MigrateableT0ken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Name() (string, error) {
	return _MigrateableT0ken.Contract.Name(&_MigrateableT0ken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) Owner() (common.Address, error) {
	return _MigrateableT0ken.Contract.Owner(&_MigrateableT0ken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Owner() (common.Address, error) {
	return _MigrateableT0ken.Contract.Owner(&_MigrateableT0ken.CallOpts)
}

// Predecessor is a free data retrieval call binding the contract method 0xb719d032.
//
// Solidity: function predecessor() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) Predecessor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "predecessor")
	return *ret0, err
}

// Predecessor is a free data retrieval call binding the contract method 0xb719d032.
//
// Solidity: function predecessor() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) Predecessor() (common.Address, error) {
	return _MigrateableT0ken.Contract.Predecessor(&_MigrateableT0ken.CallOpts)
}

// Predecessor is a free data retrieval call binding the contract method 0xb719d032.
//
// Solidity: function predecessor() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Predecessor() (common.Address, error) {
	return _MigrateableT0ken.Contract.Predecessor(&_MigrateableT0ken.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCaller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenSession) Successor() (common.Address, error) {
	return _MigrateableT0ken.Contract.Successor(&_MigrateableT0ken.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Successor() (common.Address, error) {
	return _MigrateableT0ken.Contract.Successor(&_MigrateableT0ken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MigrateableT0ken *MigrateableT0kenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MigrateableT0ken *MigrateableT0kenSession) Symbol() (string, error) {
	return _MigrateableT0ken.Contract.Symbol(&_MigrateableT0ken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) Symbol() (string, error) {
	return _MigrateableT0ken.Contract.Symbol(&_MigrateableT0ken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MigrateableT0ken.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenSession) TotalSupply() (*big.Int, error) {
	return _MigrateableT0ken.Contract.TotalSupply(&_MigrateableT0ken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_MigrateableT0ken *MigrateableT0kenCallerSession) TotalSupply() (*big.Int, error) {
	return _MigrateableT0ken.Contract.TotalSupply(&_MigrateableT0ken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "approve", spender, tokens)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) Approve(spender common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.Approve(&_MigrateableT0ken.TransactOpts, spender, tokens)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) Approve(spender common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.Approve(&_MigrateableT0ken.TransactOpts, spender, tokens)
}

// CancelAndReissue is a paid mutator transaction binding the contract method 0x79f64720.
//
// Solidity: function cancelAndReissue(original address, replacement address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) CancelAndReissue(opts *bind.TransactOpts, original common.Address, replacement common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "cancelAndReissue", original, replacement)
}

// CancelAndReissue is a paid mutator transaction binding the contract method 0x79f64720.
//
// Solidity: function cancelAndReissue(original address, replacement address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) CancelAndReissue(original common.Address, replacement common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.CancelAndReissue(&_MigrateableT0ken.TransactOpts, original, replacement)
}

// CancelAndReissue is a paid mutator transaction binding the contract method 0x79f64720.
//
// Solidity: function cancelAndReissue(original address, replacement address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) CancelAndReissue(original common.Address, replacement common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.CancelAndReissue(&_MigrateableT0ken.TransactOpts, original, replacement)
}

// FinishIssuance is a paid mutator transaction binding the contract method 0xc422293b.
//
// Solidity: function finishIssuance() returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactor) FinishIssuance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "finishIssuance")
}

// FinishIssuance is a paid mutator transaction binding the contract method 0xc422293b.
//
// Solidity: function finishIssuance() returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) FinishIssuance() (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.FinishIssuance(&_MigrateableT0ken.TransactOpts)
}

// FinishIssuance is a paid mutator transaction binding the contract method 0xc422293b.
//
// Solidity: function finishIssuance() returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) FinishIssuance() (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.FinishIssuance(&_MigrateableT0ken.TransactOpts)
}

// IssueTokens is a paid mutator transaction binding the contract method 0xa5820daa.
//
// Solidity: function issueTokens(quantity uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactor) IssueTokens(opts *bind.TransactOpts, quantity *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "issueTokens", quantity)
}

// IssueTokens is a paid mutator transaction binding the contract method 0xa5820daa.
//
// Solidity: function issueTokens(quantity uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) IssueTokens(quantity *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.IssueTokens(&_MigrateableT0ken.TransactOpts, quantity)
}

// IssueTokens is a paid mutator transaction binding the contract method 0xa5820daa.
//
// Solidity: function issueTokens(quantity uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) IssueTokens(quantity *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.IssueTokens(&_MigrateableT0ken.TransactOpts, quantity)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MigrateableT0ken *MigrateableT0kenSession) Kill() (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.Kill(&_MigrateableT0ken.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) Kill() (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.Kill(&_MigrateableT0ken.TransactOpts)
}

// MigrateTokens is a paid mutator transaction binding the contract method 0x9869f1b7.
//
// Solidity: function migrateTokens(from address, to address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) MigrateTokens(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "migrateTokens", from, to)
}

// MigrateTokens is a paid mutator transaction binding the contract method 0x9869f1b7.
//
// Solidity: function migrateTokens(from address, to address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) MigrateTokens(from common.Address, to common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.MigrateTokens(&_MigrateableT0ken.TransactOpts, from, to)
}

// MigrateTokens is a paid mutator transaction binding the contract method 0x9869f1b7.
//
// Solidity: function migrateTokens(from address, to address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) MigrateTokens(from common.Address, to common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.MigrateTokens(&_MigrateableT0ken.TransactOpts, from, to)
}

// SetCompliance is a paid mutator transaction binding the contract method 0xf8981789.
//
// Solidity: function setCompliance(newComplianceAddress address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) SetCompliance(opts *bind.TransactOpts, newComplianceAddress common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "setCompliance", newComplianceAddress)
}

// SetCompliance is a paid mutator transaction binding the contract method 0xf8981789.
//
// Solidity: function setCompliance(newComplianceAddress address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) SetCompliance(newComplianceAddress common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetCompliance(&_MigrateableT0ken.TransactOpts, newComplianceAddress)
}

// SetCompliance is a paid mutator transaction binding the contract method 0xf8981789.
//
// Solidity: function setCompliance(newComplianceAddress address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) SetCompliance(newComplianceAddress common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetCompliance(&_MigrateableT0ken.TransactOpts, newComplianceAddress)
}

// SetIssuer is a paid mutator transaction binding the contract method 0x55cc4e57.
//
// Solidity: function setIssuer(newIssuer address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) SetIssuer(opts *bind.TransactOpts, newIssuer common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "setIssuer", newIssuer)
}

// SetIssuer is a paid mutator transaction binding the contract method 0x55cc4e57.
//
// Solidity: function setIssuer(newIssuer address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) SetIssuer(newIssuer common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetIssuer(&_MigrateableT0ken.TransactOpts, newIssuer)
}

// SetIssuer is a paid mutator transaction binding the contract method 0x55cc4e57.
//
// Solidity: function setIssuer(newIssuer address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) SetIssuer(newIssuer common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetIssuer(&_MigrateableT0ken.TransactOpts, newIssuer)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) SetLocked(opts *bind.TransactOpts, locked bool) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "setLocked", locked)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) SetLocked(locked bool) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetLocked(&_MigrateableT0ken.TransactOpts, locked)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) SetLocked(locked bool) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetLocked(&_MigrateableT0ken.TransactOpts, locked)
}

// SetPredecessor is a paid mutator transaction binding the contract method 0xb3d724d6.
//
// Solidity: function setPredecessor(token address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) SetPredecessor(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "setPredecessor", token)
}

// SetPredecessor is a paid mutator transaction binding the contract method 0xb3d724d6.
//
// Solidity: function setPredecessor(token address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) SetPredecessor(token common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetPredecessor(&_MigrateableT0ken.TransactOpts, token)
}

// SetPredecessor is a paid mutator transaction binding the contract method 0xb3d724d6.
//
// Solidity: function setPredecessor(token address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) SetPredecessor(token common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetPredecessor(&_MigrateableT0ken.TransactOpts, token)
}

// SetSuccessor is a paid mutator transaction binding the contract method 0x10e5bff8.
//
// Solidity: function setSuccessor(token address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) SetSuccessor(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "setSuccessor", token)
}

// SetSuccessor is a paid mutator transaction binding the contract method 0x10e5bff8.
//
// Solidity: function setSuccessor(token address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) SetSuccessor(token common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetSuccessor(&_MigrateableT0ken.TransactOpts, token)
}

// SetSuccessor is a paid mutator transaction binding the contract method 0x10e5bff8.
//
// Solidity: function setSuccessor(token address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) SetSuccessor(token common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.SetSuccessor(&_MigrateableT0ken.TransactOpts, token)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "transfer", to, tokens)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) Transfer(to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.Transfer(&_MigrateableT0ken.TransactOpts, to, tokens)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) Transfer(to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.Transfer(&_MigrateableT0ken.TransactOpts, to, tokens)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "transferFrom", from, to, tokens)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) TransferFrom(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.TransferFrom(&_MigrateableT0ken.TransactOpts, from, to, tokens)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) TransferFrom(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.TransferFrom(&_MigrateableT0ken.TransactOpts, from, to, tokens)
}

// TransferOverride is a paid mutator transaction binding the contract method 0x80318be8.
//
// Solidity: function transferOverride(from address, to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactor) TransferOverride(opts *bind.TransactOpts, from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "transferOverride", from, to, tokens)
}

// TransferOverride is a paid mutator transaction binding the contract method 0x80318be8.
//
// Solidity: function transferOverride(from address, to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenSession) TransferOverride(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.TransferOverride(&_MigrateableT0ken.TransactOpts, from, to, tokens)
}

// TransferOverride is a paid mutator transaction binding the contract method 0x80318be8.
//
// Solidity: function transferOverride(from address, to address, tokens uint256) returns(bool)
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) TransferOverride(from common.Address, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.TransferOverride(&_MigrateableT0ken.TransactOpts, from, to, tokens)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactor) TransferOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.contract.Transact(opts, "transferOwner", newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_MigrateableT0ken *MigrateableT0kenSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.TransferOwner(&_MigrateableT0ken.TransactOpts, newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_MigrateableT0ken *MigrateableT0kenTransactorSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _MigrateableT0ken.Contract.TransferOwner(&_MigrateableT0ken.TransactOpts, newOwner)
}

// MigrateableT0kenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MigrateableT0ken contract.
type MigrateableT0kenApprovalIterator struct {
	Event *MigrateableT0kenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenApproval represents a Approval event raised by the MigrateableT0ken contract.
type MigrateableT0kenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MigrateableT0kenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenApprovalIterator{contract: _MigrateableT0ken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenApproval)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenIssuanceIterator is returned from FilterIssuance and is used to iterate over the raw logs and unpacked data for Issuance events raised by the MigrateableT0ken contract.
type MigrateableT0kenIssuanceIterator struct {
	Event *MigrateableT0kenIssuance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenIssuanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenIssuance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenIssuance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenIssuanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenIssuanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenIssuance represents a Issuance event raised by the MigrateableT0ken contract.
type MigrateableT0kenIssuance struct {
	To     common.Address
	Tokens *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuance is a free log retrieval operation binding the contract event 0x9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb.
//
// Solidity: e Issuance(to indexed address, tokens uint256)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterIssuance(opts *bind.FilterOpts, to []common.Address) (*MigrateableT0kenIssuanceIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "Issuance", toRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenIssuanceIterator{contract: _MigrateableT0ken.contract, event: "Issuance", logs: logs, sub: sub}, nil
}

// WatchIssuance is a free log subscription operation binding the contract event 0x9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb.
//
// Solidity: e Issuance(to indexed address, tokens uint256)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchIssuance(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenIssuance, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "Issuance", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenIssuance)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "Issuance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenIssuanceFinishedIterator is returned from FilterIssuanceFinished and is used to iterate over the raw logs and unpacked data for IssuanceFinished events raised by the MigrateableT0ken contract.
type MigrateableT0kenIssuanceFinishedIterator struct {
	Event *MigrateableT0kenIssuanceFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenIssuanceFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenIssuanceFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenIssuanceFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenIssuanceFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenIssuanceFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenIssuanceFinished represents a IssuanceFinished event raised by the MigrateableT0ken contract.
type MigrateableT0kenIssuanceFinished struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterIssuanceFinished is a free log retrieval operation binding the contract event 0x29fe76cc5ca143e91eadf7242fda487fcef09318c1237900f958abe1e2c5beff.
//
// Solidity: e IssuanceFinished()
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterIssuanceFinished(opts *bind.FilterOpts) (*MigrateableT0kenIssuanceFinishedIterator, error) {

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "IssuanceFinished")
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenIssuanceFinishedIterator{contract: _MigrateableT0ken.contract, event: "IssuanceFinished", logs: logs, sub: sub}, nil
}

// WatchIssuanceFinished is a free log subscription operation binding the contract event 0x29fe76cc5ca143e91eadf7242fda487fcef09318c1237900f958abe1e2c5beff.
//
// Solidity: e IssuanceFinished()
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchIssuanceFinished(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenIssuanceFinished) (event.Subscription, error) {

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "IssuanceFinished")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenIssuanceFinished)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "IssuanceFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenIssuerSetIterator is returned from FilterIssuerSet and is used to iterate over the raw logs and unpacked data for IssuerSet events raised by the MigrateableT0ken contract.
type MigrateableT0kenIssuerSetIterator struct {
	Event *MigrateableT0kenIssuerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenIssuerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenIssuerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenIssuerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenIssuerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenIssuerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenIssuerSet represents a IssuerSet event raised by the MigrateableT0ken contract.
type MigrateableT0kenIssuerSet struct {
	PreviousIssuer common.Address
	NewIssuer      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterIssuerSet is a free log retrieval operation binding the contract event 0xf7189b85d7899f5a32d733e6584c4f1dcdff0274f09d969d186c1797673ede11.
//
// Solidity: e IssuerSet(previousIssuer indexed address, newIssuer indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterIssuerSet(opts *bind.FilterOpts, previousIssuer []common.Address, newIssuer []common.Address) (*MigrateableT0kenIssuerSetIterator, error) {

	var previousIssuerRule []interface{}
	for _, previousIssuerItem := range previousIssuer {
		previousIssuerRule = append(previousIssuerRule, previousIssuerItem)
	}
	var newIssuerRule []interface{}
	for _, newIssuerItem := range newIssuer {
		newIssuerRule = append(newIssuerRule, newIssuerItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "IssuerSet", previousIssuerRule, newIssuerRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenIssuerSetIterator{contract: _MigrateableT0ken.contract, event: "IssuerSet", logs: logs, sub: sub}, nil
}

// WatchIssuerSet is a free log subscription operation binding the contract event 0xf7189b85d7899f5a32d733e6584c4f1dcdff0274f09d969d186c1797673ede11.
//
// Solidity: e IssuerSet(previousIssuer indexed address, newIssuer indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchIssuerSet(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenIssuerSet, previousIssuer []common.Address, newIssuer []common.Address) (event.Subscription, error) {

	var previousIssuerRule []interface{}
	for _, previousIssuerItem := range previousIssuer {
		previousIssuerRule = append(previousIssuerRule, previousIssuerItem)
	}
	var newIssuerRule []interface{}
	for _, newIssuerItem := range newIssuer {
		newIssuerRule = append(newIssuerRule, newIssuerItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "IssuerSet", previousIssuerRule, newIssuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenIssuerSet)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "IssuerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenOwnerTransferredIterator is returned from FilterOwnerTransferred and is used to iterate over the raw logs and unpacked data for OwnerTransferred events raised by the MigrateableT0ken contract.
type MigrateableT0kenOwnerTransferredIterator struct {
	Event *MigrateableT0kenOwnerTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenOwnerTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenOwnerTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenOwnerTransferred represents a OwnerTransferred event raised by the MigrateableT0ken contract.
type MigrateableT0kenOwnerTransferred struct {
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerTransferred is a free log retrieval operation binding the contract event 0x8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c9.
//
// Solidity: e OwnerTransferred(oldOwner indexed address, newOwner indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterOwnerTransferred(opts *bind.FilterOpts, oldOwner []common.Address, newOwner []common.Address) (*MigrateableT0kenOwnerTransferredIterator, error) {

	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "OwnerTransferred", oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenOwnerTransferredIterator{contract: _MigrateableT0ken.contract, event: "OwnerTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnerTransferred is a free log subscription operation binding the contract event 0x8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c9.
//
// Solidity: e OwnerTransferred(oldOwner indexed address, newOwner indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchOwnerTransferred(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenOwnerTransferred, oldOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "OwnerTransferred", oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenOwnerTransferred)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "OwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenPrecededByIterator is returned from FilterPrecededBy and is used to iterate over the raw logs and unpacked data for PrecededBy events raised by the MigrateableT0ken contract.
type MigrateableT0kenPrecededByIterator struct {
	Event *MigrateableT0kenPrecededBy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenPrecededByIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenPrecededBy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenPrecededBy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenPrecededByIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenPrecededByIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenPrecededBy represents a PrecededBy event raised by the MigrateableT0ken contract.
type MigrateableT0kenPrecededBy struct {
	Predecessor common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPrecededBy is a free log retrieval operation binding the contract event 0x4779b83fa355cab77653ce138f51eb963e2d7c4632c698e9c77ee1ddb920d56d.
//
// Solidity: e PrecededBy(predecessor indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterPrecededBy(opts *bind.FilterOpts, predecessor []common.Address) (*MigrateableT0kenPrecededByIterator, error) {

	var predecessorRule []interface{}
	for _, predecessorItem := range predecessor {
		predecessorRule = append(predecessorRule, predecessorItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "PrecededBy", predecessorRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenPrecededByIterator{contract: _MigrateableT0ken.contract, event: "PrecededBy", logs: logs, sub: sub}, nil
}

// WatchPrecededBy is a free log subscription operation binding the contract event 0x4779b83fa355cab77653ce138f51eb963e2d7c4632c698e9c77ee1ddb920d56d.
//
// Solidity: e PrecededBy(predecessor indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchPrecededBy(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenPrecededBy, predecessor []common.Address) (event.Subscription, error) {

	var predecessorRule []interface{}
	for _, predecessorItem := range predecessor {
		predecessorRule = append(predecessorRule, predecessorItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "PrecededBy", predecessorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenPrecededBy)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "PrecededBy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenShareholderAddedIterator is returned from FilterShareholderAdded and is used to iterate over the raw logs and unpacked data for ShareholderAdded events raised by the MigrateableT0ken contract.
type MigrateableT0kenShareholderAddedIterator struct {
	Event *MigrateableT0kenShareholderAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenShareholderAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenShareholderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenShareholderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenShareholderAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenShareholderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenShareholderAdded represents a ShareholderAdded event raised by the MigrateableT0ken contract.
type MigrateableT0kenShareholderAdded struct {
	Shareholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareholderAdded is a free log retrieval operation binding the contract event 0x3082c1c4977de80c4f67ee77b56b282610ec93a7ecbcc31b551e0ac2f7bd0395.
//
// Solidity: e ShareholderAdded(shareholder address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterShareholderAdded(opts *bind.FilterOpts) (*MigrateableT0kenShareholderAddedIterator, error) {

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "ShareholderAdded")
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenShareholderAddedIterator{contract: _MigrateableT0ken.contract, event: "ShareholderAdded", logs: logs, sub: sub}, nil
}

// WatchShareholderAdded is a free log subscription operation binding the contract event 0x3082c1c4977de80c4f67ee77b56b282610ec93a7ecbcc31b551e0ac2f7bd0395.
//
// Solidity: e ShareholderAdded(shareholder address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchShareholderAdded(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenShareholderAdded) (event.Subscription, error) {

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "ShareholderAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenShareholderAdded)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "ShareholderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenShareholderRemovedIterator is returned from FilterShareholderRemoved and is used to iterate over the raw logs and unpacked data for ShareholderRemoved events raised by the MigrateableT0ken contract.
type MigrateableT0kenShareholderRemovedIterator struct {
	Event *MigrateableT0kenShareholderRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenShareholderRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenShareholderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenShareholderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenShareholderRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenShareholderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenShareholderRemoved represents a ShareholderRemoved event raised by the MigrateableT0ken contract.
type MigrateableT0kenShareholderRemoved struct {
	Shareholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareholderRemoved is a free log retrieval operation binding the contract event 0x7ba114ff3d9844510a088eea94cd35562e7c97a2d36a418b37b2e61e5c77affe.
//
// Solidity: e ShareholderRemoved(shareholder address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterShareholderRemoved(opts *bind.FilterOpts) (*MigrateableT0kenShareholderRemovedIterator, error) {

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "ShareholderRemoved")
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenShareholderRemovedIterator{contract: _MigrateableT0ken.contract, event: "ShareholderRemoved", logs: logs, sub: sub}, nil
}

// WatchShareholderRemoved is a free log subscription operation binding the contract event 0x7ba114ff3d9844510a088eea94cd35562e7c97a2d36a418b37b2e61e5c77affe.
//
// Solidity: e ShareholderRemoved(shareholder address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchShareholderRemoved(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenShareholderRemoved) (event.Subscription, error) {

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "ShareholderRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenShareholderRemoved)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "ShareholderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenSucceededByIterator is returned from FilterSucceededBy and is used to iterate over the raw logs and unpacked data for SucceededBy events raised by the MigrateableT0ken contract.
type MigrateableT0kenSucceededByIterator struct {
	Event *MigrateableT0kenSucceededBy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenSucceededByIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenSucceededBy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenSucceededBy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenSucceededByIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenSucceededByIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenSucceededBy represents a SucceededBy event raised by the MigrateableT0ken contract.
type MigrateableT0kenSucceededBy struct {
	Successor common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSucceededBy is a free log retrieval operation binding the contract event 0x86640a0f4d220948cb9c4dcba2cd1269adf1171c504757c96a10448c9285d424.
//
// Solidity: e SucceededBy(successor indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterSucceededBy(opts *bind.FilterOpts, successor []common.Address) (*MigrateableT0kenSucceededByIterator, error) {

	var successorRule []interface{}
	for _, successorItem := range successor {
		successorRule = append(successorRule, successorItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "SucceededBy", successorRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenSucceededByIterator{contract: _MigrateableT0ken.contract, event: "SucceededBy", logs: logs, sub: sub}, nil
}

// WatchSucceededBy is a free log subscription operation binding the contract event 0x86640a0f4d220948cb9c4dcba2cd1269adf1171c504757c96a10448c9285d424.
//
// Solidity: e SucceededBy(successor indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchSucceededBy(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenSucceededBy, successor []common.Address) (event.Subscription, error) {

	var successorRule []interface{}
	for _, successorItem := range successor {
		successorRule = append(successorRule, successorItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "SucceededBy", successorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenSucceededBy)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "SucceededBy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MigrateableT0ken contract.
type MigrateableT0kenTransferIterator struct {
	Event *MigrateableT0kenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenTransfer represents a Transfer event raised by the MigrateableT0ken contract.
type MigrateableT0kenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MigrateableT0kenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenTransferIterator{contract: _MigrateableT0ken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenTransfer)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigrateableT0kenVerifiedAddressSupersededIterator is returned from FilterVerifiedAddressSuperseded and is used to iterate over the raw logs and unpacked data for VerifiedAddressSuperseded events raised by the MigrateableT0ken contract.
type MigrateableT0kenVerifiedAddressSupersededIterator struct {
	Event *MigrateableT0kenVerifiedAddressSuperseded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigrateableT0kenVerifiedAddressSupersededIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigrateableT0kenVerifiedAddressSuperseded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigrateableT0kenVerifiedAddressSuperseded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigrateableT0kenVerifiedAddressSupersededIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigrateableT0kenVerifiedAddressSupersededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigrateableT0kenVerifiedAddressSuperseded represents a VerifiedAddressSuperseded event raised by the MigrateableT0ken contract.
type MigrateableT0kenVerifiedAddressSuperseded struct {
	Original    common.Address
	Replacement common.Address
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterVerifiedAddressSuperseded is a free log retrieval operation binding the contract event 0xb64971100522354f3d25283cb14e2eefcb0dd26a757482ccfe42479d0a686857.
//
// Solidity: e VerifiedAddressSuperseded(original indexed address, replacement indexed address, sender indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) FilterVerifiedAddressSuperseded(opts *bind.FilterOpts, original []common.Address, replacement []common.Address, sender []common.Address) (*MigrateableT0kenVerifiedAddressSupersededIterator, error) {

	var originalRule []interface{}
	for _, originalItem := range original {
		originalRule = append(originalRule, originalItem)
	}
	var replacementRule []interface{}
	for _, replacementItem := range replacement {
		replacementRule = append(replacementRule, replacementItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.FilterLogs(opts, "VerifiedAddressSuperseded", originalRule, replacementRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MigrateableT0kenVerifiedAddressSupersededIterator{contract: _MigrateableT0ken.contract, event: "VerifiedAddressSuperseded", logs: logs, sub: sub}, nil
}

// WatchVerifiedAddressSuperseded is a free log subscription operation binding the contract event 0xb64971100522354f3d25283cb14e2eefcb0dd26a757482ccfe42479d0a686857.
//
// Solidity: e VerifiedAddressSuperseded(original indexed address, replacement indexed address, sender indexed address)
func (_MigrateableT0ken *MigrateableT0kenFilterer) WatchVerifiedAddressSuperseded(opts *bind.WatchOpts, sink chan<- *MigrateableT0kenVerifiedAddressSuperseded, original []common.Address, replacement []common.Address, sender []common.Address) (event.Subscription, error) {

	var originalRule []interface{}
	for _, originalItem := range original {
		originalRule = append(originalRule, originalItem)
	}
	var replacementRule []interface{}
	for _, replacementItem := range replacement {
		replacementRule = append(replacementRule, replacementItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MigrateableT0ken.contract.WatchLogs(opts, "VerifiedAddressSuperseded", originalRule, replacementRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigrateableT0kenVerifiedAddressSuperseded)
				if err := _MigrateableT0ken.contract.UnpackLog(event, "VerifiedAddressSuperseded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
